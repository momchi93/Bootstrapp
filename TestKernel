import math
import numpy as np

n_samples = 8
summ = np.zeros([0, n_samples])
w = np.linspace(0, math.pi, n_samples, endpoint=True)


def kernel_function(arg):
    if abs(arg) <= 1:
        return 0.75 * (1 - arg ** 2)
    else:
        return 0

print(w)
for i in range(0, n_samples):
    print(kernel_function((w[0]-w[i])/0.5))


















#def spectral_density_estimator(omega[], h, powerspec):
    #const = 1/(h*n_samples)
    #summ = np.zeros([0, n_samples])
    #for i in range(0, int(n_samples/2)):
    #    summ[i] = (kernel_function((omega[]-w[i])/h))*powerspec[i]
    #return const*sum(summ)

def spectral_density_estimator(h, powerspec, linespace):
    const = 1/(h*n_samples)
    kernel = summ = np.zeros([n_samples, ])
    for i in range(0, n_samples):
        kernel[i] = kernel_function((linespace-linespace[i])/h)
    summ = sum(kernel*powerspec)
    return summ